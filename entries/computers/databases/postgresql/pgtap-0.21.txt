pgTAP 0.21 Drops
meta-keywords: pgTAP, PostgreSQL, testing, unit testing, TAP, PL/pgSQL, SQL
tags: pgTAP PostgreSQL testing unit+testing TAP PL/pgSQL SQL relations

<a href="http://pgtap.projects.postgresql.org/" title="pgTAP: Unit Testing for PostgreSQL"><img src="http://pgtap.projects.postgresql.org/ui/img/tap.jpg" alt="Mmmmm…pgTAP" /></a>

<p>I just dropped a new version of <a href="http://pgtap.projects.postgresql.org/" title="pgTAP: Unit Testing for PostgreSQL">pgTAP</a>, following a few marathon hack sessions since <a href="http://www.pgcon.org/2009/schedule/events/165.en.html" title="PGCon: “Unit Test Your Database!”">my talk at PGCon</a> (<a href="http://hosting3.epresence.tv/fosslc/1/watch/129.aspx" title="Unit Test Your Database—The Movie">movie here</a>, BTW). Actually, the new <a href="http://pgtap.projects.postgresql.org/documentation.html#`performs_ok+(+sql,+milliseconds,+description+)`" title="pgTAP Documenation: `performs_ok()`"><code>performs_ok()</code></a> function came about as I wrote the presentation, but all the rest came on the flight home and in the few days since. Not sure when I'll hack on it this much again (it's getting a bit big at 5,758 lines of PL/pgSQL and SQL).</p>

<p>Overall I'm very happy with this release, as it adds a lot of new assertion functions. In particular, I added a slew of functions that test that the objects in a given schema (or visible in the search path, if you prefer) are exactly the objects that <em>should</em> be there. This is useful for a couple of things. For one, Norman Yamada, in <a href="http://www.pgcon.org/2009/schedule/events/146.en.html" title="PGCon: “Reconciling and comparing databases”">his PGCon talk</a>, mentioned that his team was using pgTAP to compare database objects between replicated databases. I like this because it's a great example of using pgTAP for <a href="http://en.wikipedia.org/wiki/System_testing" title="Wikipedia: “System testing”">system testing</a>, rather than just <a href="http://en.wikipedia.org/wiki/Unit_testing" title="Wikipedia: “Unit testing”">unit testing</a> as I've been advocating. See, pgTAP can be used for any kind of testing!</p>

<p>Another use for these functions is in a large organization where many different people might be making changes to a schema. In this scenario, you might have application developers adding new objects to the database (or dropping objects) without necessarily informing the DBAs. Using, for example, <a href="http://pgtap.projects.postgresql.org/documentation.html#`tables_are(+schema,+tables,+description+)`" title="pgTAP Documenation: `tables_are()`"><code>tables_are()</code></a> and <a href="http://pgtap.projects.postgresql.org/documentation.html#`functions_are(+schema,+functions[],+description+)`" title="pgTAP Documenation: `functions_are()`"><code>functions_are()</code></a> and continuous testing, the DBAs can see when objects have been modified by the developers. Even better, if the developers are running the pgTAP tests themselves (as they should be!), they will be reminded to add new tests for their changes when the existing tests notice that things have been added or dropped and thus fail.</p>

<p>Beyond that, I added a bunch of new functions for <a href="http://pgtap.projects.postgresql.org/documentation.html#Feeling+Funky" title="pgTAP Documenation: Feeling Funky">testing functions</a> and a number of other goodies. Check out the <a href="http://pgfoundry.org/frs/shownotes.php?release_id=1389" title="pgTAP 0.21 Release Notes and Changes">release notes</a> for all the details.</p>

<p>With these changes, I've finished nearly everything I've thought of for pgTAP. There are only a few sequence-testing functions left on the To Do list, as well as a <a href="http://archives.postgresql.org/pgsql-hackers/2009-05/msg01318.php" title="pgsql-hackers: Re: plperl error format vs plpgsql error format vs pgTAP">call to add a <code>throws_like()</code></a> function, which I'll throw in soon if no one else steps up. Beyond these changes, I have a few ideas of where to take it next, but so far I'm kind of stumped. Mainly what I think should be done is to add an interface that makes it easier to compare relations (or result sets, if you prefer). <a href="http://epictest.org/" title="Epic, more full of fail than any other testing tool">Epic</a> does this by allowing query strings to be passed to a function, but I'd really like to keep queries in SQL rather than in SQL strings. I'll be giving it some more thought and will post about it soon.</p>

